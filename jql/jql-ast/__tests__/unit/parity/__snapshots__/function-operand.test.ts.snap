// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Function operand 游린 fn() 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '(' expecting {'<', '>', '>=', '<=', '=', '!=', '~', '!~', IN, IS, NOT, WAS, CHANGED}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      4,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          2,
        ],
        "properties": Array [],
        "text": "fn",
        "value": "fn",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": undefined,
      "parent": [Circular],
      "position": Array [
        0,
        4,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "fn()",
}
`;

exports[`Function operand 游린 issuetype = ()value 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '(' expecting {EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = ()value",
}
`;

exports[`Function operand 游린 issuetype = value( 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {')', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            17,
          ],
          "text": "value",
          "value": "value",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          18,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        18,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = value(",
}
`;

exports[`Function operand 游린 issuetype = value(one 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: missing ')' at '<EOF>'],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              18,
              21,
            ],
            "text": "one",
            "value": "one",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            17,
          ],
          "text": "value",
          "value": "value",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          21,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = value(one",
}
`;

exports[`Function operand 游린 issuetype = value) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: extraneous input ')' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "text": "value",
        "type": "operand",
        "value": "value",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = value)",
}
`;

exports[`Function operand 游릴 assignee = "currentUser"() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            11,
            24,
          ],
          "text": "\\"currentUser\\"",
          "value": "currentUser",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          11,
          26,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          10,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee = \\"currentUser\\"()",
}
`;

exports[`Function operand 游릴 assignee = 'currentUser'() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            11,
            24,
          ],
          "text": "'currentUser'",
          "value": "currentUser",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          11,
          26,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          10,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee = 'currentUser'()",
}
`;

exports[`Function operand 游릴 issuetype = fn  (  one  ,  two  ) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      33,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              19,
              22,
            ],
            "text": "one",
            "value": "one",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              27,
              30,
            ],
            "text": "two",
            "value": "two",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          33,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        33,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn  (  one  ,  two  )",
}
`;

exports[`Function operand 游릴 issuetype = fn () 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn ()",
}
`;

exports[`Function operand 游릴 issuetype = fn( ) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn( )",
}
`;

exports[`Function operand 游릴 issuetype = fn() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      16,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          16,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        16,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn()",
}
`;

exports[`Function operand 游릴 issuetype = fn(one) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              15,
              18,
            ],
            "text": "one",
            "value": "one",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          19,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn(one)",
}
`;

exports[`Function operand 游릴 issuetype = fn(one,"two",3) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      27,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              15,
              18,
            ],
            "text": "one",
            "value": "one",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              19,
              24,
            ],
            "text": "\\"two\\"",
            "value": "two",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              25,
              26,
            ],
            "text": "3",
            "value": "3",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          27,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        27,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn(one,\\"two\\",3)",
}
`;

exports[`Function operand 游릴 issuetype = fn(one,two) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      23,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              15,
              18,
            ],
            "text": "one",
            "value": "one",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              19,
              22,
            ],
            "text": "two",
            "value": "two",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            14,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          12,
          23,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = fn(one,two)",
}
`;

exports[`Function operand 游릴 issuetype in (fn(one,two)) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          26,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "arguments": Array [
              Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  17,
                  20,
                ],
                "text": "one",
                "value": "one",
              },
              Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  21,
                  24,
                ],
                "text": "two",
                "value": "two",
              },
            ],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                14,
                16,
              ],
              "text": "fn",
              "value": "fn",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              14,
              25,
            ],
            "type": "operand",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (fn(one,two))",
}
`;

exports[`Function operand 游릴 issuetype=fn() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      14,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            10,
            12,
          ],
          "text": "fn",
          "value": "fn",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          10,
          14,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          10,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": Array [
        0,
        14,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype=fn()",
}
`;
