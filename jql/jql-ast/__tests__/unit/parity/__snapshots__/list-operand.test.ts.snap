// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List operand 游린 issuetype in () 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input ')' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      15,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          15,
        ],
        "type": "operand",
        "values": Array [],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        15,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in ()",
}
`;

exports[`List operand 游린 issuetype in (,) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input ',' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
    [JQLSyntaxError: mismatched input ')' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      16,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          16,
        ],
        "type": "operand",
        "values": Array [],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        16,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (,)",
}
`;

exports[`List operand 游린 issuetype in (value 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {')', ','}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              14,
              19,
            ],
            "text": "value",
            "type": "operand",
            "value": "value",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (value",
}
`;

exports[`List operand 游린 issuetype in (value, 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      20,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          20,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              14,
              19,
            ],
            "text": "value",
            "type": "operand",
            "value": "value",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        20,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (value,",
}
`;

exports[`List operand 游린 issuetype in )value( 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: extraneous input ')' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
    [JQLSyntaxError: mismatched input '<EOF>' expecting {')', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      20,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            14,
            19,
          ],
          "text": "value",
          "value": "value",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          14,
          20,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        20,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in )value(",
}
`;

exports[`List operand 游린 issuetype in value) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: missing '(' at ')'],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            13,
            18,
          ],
          "text": "value",
          "value": "value",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          13,
          19,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in value)",
}
`;

exports[`List operand 游릴 issuetype in ((value), another) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      31,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          31,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "appendOperand": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "list",
            "parent": [Circular],
            "position": Array [
              14,
              21,
            ],
            "type": "operand",
            "values": Array [
              Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  15,
                  20,
                ],
                "text": "value",
                "type": "operand",
                "value": "value",
              },
            ],
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              23,
              30,
            ],
            "text": "another",
            "type": "operand",
            "value": "another",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        31,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in ((value), another)",
}
`;

exports[`List operand 游릴 issuetype in (value) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      20,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          20,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              14,
              19,
            ],
            "text": "value",
            "type": "operand",
            "value": "value",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        20,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (value)",
}
`;

exports[`List operand 游릴 issuetype in (value, "another value") 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      37,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          37,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              14,
              19,
            ],
            "text": "value",
            "type": "operand",
            "value": "value",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              36,
            ],
            "text": "\\"another value\\"",
            "type": "operand",
            "value": "another value",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        37,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (value, \\"another value\\")",
}
`;

exports[`List operand 游릴 issuetype in (value, somefunction()) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      36,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          9,
        ],
        "properties": Array [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          13,
          36,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              14,
              19,
            ],
            "text": "value",
            "type": "operand",
            "value": "value",
          },
          Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                21,
                33,
              ],
              "text": "somefunction",
              "value": "somefunction",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              21,
              35,
            ],
            "type": "operand",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          10,
          12,
        ],
        "text": "in",
        "value": "in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        36,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype in (value, somefunction())",
}
`;
