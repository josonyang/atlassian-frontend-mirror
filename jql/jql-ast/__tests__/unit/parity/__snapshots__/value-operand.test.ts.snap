// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Value operand 游린 issuetype = """ 1`] = `
{
  "errors": [
    [JQLSyntaxError: extraneous input '"' expecting {<EOF>, ORDER}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      15,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          14,
        ],
        "text": """",
        "type": "operand",
        "value": "",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        14,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = """",
}
`;

exports[`Value operand 游린 issuetype = "value with "unescaped" characters" 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input 'unescaped' expecting {<EOF>, ORDER}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      47,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          25,
        ],
        "text": ""value with "",
        "type": "operand",
        "value": "value with ",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        25,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = "value with "unescaped" characters"",
}
`;

exports[`Value operand 游린 issuetype = value with $pecial characters 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input 'with' expecting {<EOF>, ORDER}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      41,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          17,
        ],
        "text": "value",
        "type": "operand",
        "value": "value",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        17,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = value with $pecial characters",
}
`;

exports[`Value operand 游린 issuetype = value with spaces 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input 'with' expecting {<EOF>, ORDER}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      29,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          17,
        ],
        "text": "value",
        "type": "operand",
        "value": "value",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        17,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = value with spaces",
}
`;

exports[`Value operand 游릴 issuetype = "" 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      14,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          14,
        ],
        "text": """",
        "type": "operand",
        "value": "",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        14,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = """,
}
`;

exports[`Value operand 游릴 issuetype = "7" 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      15,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          15,
        ],
        "text": ""7"",
        "type": "operand",
        "value": "7",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        15,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = "7"",
}
`;

exports[`Value operand 游릴 issuetype = "value with $pecial characters" 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      43,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          43,
        ],
        "text": ""value with $pecial characters"",
        "type": "operand",
        "value": "value with $pecial characters",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        43,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = "value with $pecial characters"",
}
`;

exports[`Value operand 游릴 issuetype = "value with \\"escaped\\" characters" 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      47,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          47,
        ],
        "text": ""value with \\"escaped\\" characters"",
        "type": "operand",
        "value": "value with "escaped" characters",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        47,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = "value with \\"escaped\\" characters"",
}
`;

exports[`Value operand 游릴 issuetype = "value with spaces" 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      31,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          31,
        ],
        "text": ""value with spaces"",
        "type": "operand",
        "value": "value with spaces",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        31,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = "value with spaces"",
}
`;

exports[`Value operand 游릴 issuetype = "value" 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          19,
        ],
        "text": ""value"",
        "type": "operand",
        "value": "value",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        19,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = "value"",
}
`;

exports[`Value operand 游릴 issuetype = 'value with \\"escaped\\" characters' 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      47,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          47,
        ],
        "text": "'value with \\"escaped\\" characters'",
        "type": "operand",
        "value": "value with "escaped" characters",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        47,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = 'value with \\"escaped\\" characters'",
}
`;

exports[`Value operand 游릴 issuetype = 'value with \\'escaped\\' characters' 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      47,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          47,
        ],
        "text": "'value with \\'escaped\\' characters'",
        "type": "operand",
        "value": "value with 'escaped' characters",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        47,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = 'value with \\'escaped\\' characters'",
}
`;

exports[`Value operand 游릴 issuetype = -7 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      14,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          14,
        ],
        "text": "-7",
        "type": "operand",
        "value": "-7",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        14,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = -7",
}
`;

exports[`Value operand 游릴 issuetype = 7 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      13,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          13,
        ],
        "text": "7",
        "type": "operand",
        "value": "7",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        13,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = 7",
}
`;

exports[`Value operand 游릴 issuetype = value 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          17,
        ],
        "text": "value",
        "type": "operand",
        "value": "value",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        17,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = value",
}
`;
