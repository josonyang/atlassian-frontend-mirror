// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Was in clause ðŸŸ¥ assignee was in (a) after 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      25,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        25,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              25,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            20,
            25,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) after",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) before 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              26,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            20,
            26,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) before",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) by 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        22,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            20,
            22,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) by",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) during 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              26,
            ],
            "text": "during",
            "value": "during",
          },
          "parent": [Circular],
          "position": Array [
            20,
            26,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) during",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) from (a, b) to (c, d) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      41,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) from (a, b) to (c, d)",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) from a to b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      31,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) from a to b",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) from currentUser() to membersOf("jira-administrators") 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      74,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) from currentUser() to membersOf(\\"jira-administrators\\")",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) from empty to null 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      38,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) from empty to null",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in (a) on 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        22,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            20,
            22,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) on",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in -5 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting '('],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            16,
            18,
          ],
          "text": "-5",
          "value": "-5",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          16,
          18,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        18,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in -5",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in 0 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting '('],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            16,
            17,
          ],
          "text": "0",
          "value": "0",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          16,
          17,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in 0",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      15,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        15,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in a 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting '('],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            16,
            17,
          ],
          "text": "a",
          "value": "a",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          16,
          17,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in a",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in empty 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'empty' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in empty",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was in null 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'null' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      20,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        20,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in null",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) after 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      29,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        29,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              29,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            24,
            29,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) after",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) before 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      30,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        30,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              30,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            24,
            30,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) before",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) by 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            24,
            26,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) by",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) during 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      30,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        30,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              30,
            ],
            "text": "during",
            "value": "during",
          },
          "parent": [Circular],
          "position": Array [
            24,
            30,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) during",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) from (a, b) to (c, d) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      45,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) from (a, b) to (c, d)",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) from a to b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      35,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) from a to b",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) from currentUser() to membersOf("jira-administrators") 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      78,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) from currentUser() to membersOf(\\"jira-administrators\\")",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) from empty to null 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      42,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) from empty to null",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in (a) on 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": undefined,
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            24,
            26,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) on",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in -5 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting '('],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            20,
            22,
          ],
          "text": "-5",
          "value": "-5",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          20,
          22,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        22,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in -5",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in 0 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting '('],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            20,
            21,
          ],
          "text": "0",
          "value": "0",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          20,
          21,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in 0",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in a 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting '('],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            20,
            21,
          ],
          "text": "a",
          "value": "a",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          20,
          21,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in a",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in empty 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'empty' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      25,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        25,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in empty",
}
`;

exports[`Was in clause ðŸŸ¥ assignee was not in null 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'null' expecting {'(', POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      24,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        24,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in null",
}
`;

exports[`Was in clause ðŸŸ© assignee wAs NoT iN (a) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      23,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "wAs NoT iN",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee wAs NoT iN (a)",
}
`;

exports[`Was in clause ðŸŸ© assignee wAs iN (a) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "wAs iN",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee wAs iN (a)",
}
`;

exports[`Was in clause ðŸŸ© assignee was
in (a) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was
in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was
in (a)",
}
`;

exports[`Was in clause ðŸŸ© assignee was
not
in (a) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      23,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was
not
in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was
not
in (a)",
}
`;

exports[`Was in clause ðŸŸ© assignee was    not    in (a) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      29,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          26,
          29,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              27,
              28,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          25,
        ],
        "text": "was    not    in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        29,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was    not    in (a)",
}
`;

exports[`Was in clause ðŸŸ© assignee was   in (a) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          18,
          21,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              19,
              20,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          17,
        ],
        "text": "was   in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was   in (a)",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) after "2021-03-17" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      38,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        38,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              26,
              38,
            ],
            "text": "\\"2021-03-17\\"",
            "type": "operand",
            "value": "2021-03-17",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              25,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            20,
            38,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) after \\"2021-03-17\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) after -4w 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      29,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        29,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              26,
              29,
            ],
            "text": "-4w",
            "type": "operand",
            "value": "-4w",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              25,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            20,
            29,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) after -4w",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) after startOfWeek() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      39,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        39,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                26,
                37,
              ],
              "text": "startOfWeek",
              "value": "startOfWeek",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              26,
              39,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              25,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            20,
            39,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) after startOfWeek()",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) before "2021-03-17" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      39,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        39,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              27,
              39,
            ],
            "text": "\\"2021-03-17\\"",
            "type": "operand",
            "value": "2021-03-17",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              26,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            20,
            39,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) before \\"2021-03-17\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) before -4w 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      30,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        30,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              27,
              30,
            ],
            "text": "-4w",
            "type": "operand",
            "value": "-4w",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              26,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            20,
            30,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) before -4w",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) before now() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      32,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        32,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                27,
                30,
              ],
              "text": "now",
              "value": "now",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              27,
              32,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              26,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            20,
            32,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) before now()",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) by a 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      24,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        24,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              23,
              24,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            20,
            24,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) by a",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) by currentUser() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      36,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        36,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                23,
                34,
              ],
              "text": "currentUser",
              "value": "currentUser",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              23,
              36,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            20,
            36,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) by currentUser()",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) during ("2021-03-17", now()) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      48,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        48,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "list",
            "parent": [Circular],
            "position": Array [
              27,
              48,
            ],
            "type": "operand",
            "values": Array [
              Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  28,
                  40,
                ],
                "text": "\\"2021-03-17\\"",
                "type": "operand",
                "value": "2021-03-17",
              },
              Object {
                "accept": [Function],
                "arguments": Array [],
                "enterNode": [Function],
                "exitNode": [Function],
                "function": Object {
                  "accept": [Function],
                  "enterNode": [Function],
                  "exitNode": [Function],
                  "getChildren": [Function],
                  "parent": [Circular],
                  "position": Array [
                    42,
                    45,
                  ],
                  "text": "now",
                  "value": "now",
                },
                "getChildren": [Function],
                "operandType": "function",
                "parent": [Circular],
                "position": Array [
                  42,
                  47,
                ],
                "type": "operand",
              },
            ],
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              26,
            ],
            "text": "during",
            "value": "during",
          },
          "parent": [Circular],
          "position": Array [
            20,
            48,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) during (\\"2021-03-17\\", now())",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) on "2021-03-17" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      35,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        35,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              23,
              35,
            ],
            "text": "\\"2021-03-17\\"",
            "type": "operand",
            "value": "2021-03-17",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            20,
            35,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) on \\"2021-03-17\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) on -4w 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              23,
              26,
            ],
            "text": "-4w",
            "type": "operand",
            "value": "-4w",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            20,
            26,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) on -4w",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a) on now() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      28,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          19,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        28,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                23,
                26,
              ],
              "text": "now",
              "value": "now",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              23,
              28,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              22,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            20,
            28,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a) on now()",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a, b) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          22,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              20,
              21,
            ],
            "text": "b",
            "type": "operand",
            "value": "b",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        22,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a, b)",
}
`;

exports[`Was in clause ðŸŸ© assignee was in (a, b) by jane after "2020/07/31" before "2020/08/05" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      69,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          16,
          22,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              17,
              18,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              20,
              21,
            ],
            "text": "b",
            "type": "operand",
            "value": "b",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        69,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              26,
              30,
            ],
            "text": "jane",
            "type": "operand",
            "value": "jane",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              23,
              25,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            23,
            30,
          ],
        },
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              37,
              49,
            ],
            "text": "\\"2020/07/31\\"",
            "type": "operand",
            "value": "2020/07/31",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              31,
              36,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            31,
            49,
          ],
        },
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              57,
              69,
            ],
            "text": "\\"2020/08/05\\"",
            "type": "operand",
            "value": "2020/08/05",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              50,
              56,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            50,
            69,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in (a, b) by jane after \\"2020/07/31\\" before \\"2020/08/05\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was in membersOf("jira-administrators") 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      48,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              26,
              47,
            ],
            "text": "\\"jira-administrators\\"",
            "value": "jira-administrators",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            16,
            25,
          ],
          "text": "membersOf",
          "value": "membersOf",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          16,
          48,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "was in",
        "value": "was in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        48,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was in membersOf(\\"jira-administrators\\")",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) after "2021-03-17" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      42,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        42,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              30,
              42,
            ],
            "text": "\\"2021-03-17\\"",
            "type": "operand",
            "value": "2021-03-17",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              29,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            24,
            42,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) after \\"2021-03-17\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) after -4w 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      33,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        33,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              30,
              33,
            ],
            "text": "-4w",
            "type": "operand",
            "value": "-4w",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              29,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            24,
            33,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) after -4w",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) after startOfWeek() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      43,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        43,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                30,
                41,
              ],
              "text": "startOfWeek",
              "value": "startOfWeek",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              30,
              43,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              29,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            24,
            43,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) after startOfWeek()",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) before "2021-03-17" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      43,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        43,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              31,
              43,
            ],
            "text": "\\"2021-03-17\\"",
            "type": "operand",
            "value": "2021-03-17",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              30,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            24,
            43,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) before \\"2021-03-17\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) before -4w 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      34,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        34,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              31,
              34,
            ],
            "text": "-4w",
            "type": "operand",
            "value": "-4w",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              30,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            24,
            34,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) before -4w",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) before now() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      36,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        36,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                31,
                34,
              ],
              "text": "now",
              "value": "now",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              31,
              36,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              30,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            24,
            36,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) before now()",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) by a 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      28,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        28,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              27,
              28,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            24,
            28,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) by a",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) by currentUser() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      40,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        40,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                27,
                38,
              ],
              "text": "currentUser",
              "value": "currentUser",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              27,
              40,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            24,
            40,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) by currentUser()",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) during ("2021-03-17", now()) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      52,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        52,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "list",
            "parent": [Circular],
            "position": Array [
              31,
              52,
            ],
            "type": "operand",
            "values": Array [
              Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  32,
                  44,
                ],
                "text": "\\"2021-03-17\\"",
                "type": "operand",
                "value": "2021-03-17",
              },
              Object {
                "accept": [Function],
                "arguments": Array [],
                "enterNode": [Function],
                "exitNode": [Function],
                "function": Object {
                  "accept": [Function],
                  "enterNode": [Function],
                  "exitNode": [Function],
                  "getChildren": [Function],
                  "parent": [Circular],
                  "position": Array [
                    46,
                    49,
                  ],
                  "text": "now",
                  "value": "now",
                },
                "getChildren": [Function],
                "operandType": "function",
                "parent": [Circular],
                "position": Array [
                  46,
                  51,
                ],
                "type": "operand",
              },
            ],
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              30,
            ],
            "text": "during",
            "value": "during",
          },
          "parent": [Circular],
          "position": Array [
            24,
            52,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) during (\\"2021-03-17\\", now())",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) on "2021-03-17" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      39,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        39,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              27,
              39,
            ],
            "text": "\\"2021-03-17\\"",
            "type": "operand",
            "value": "2021-03-17",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            24,
            39,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) on \\"2021-03-17\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) on -4w 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      30,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        30,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              27,
              30,
            ],
            "text": "-4w",
            "type": "operand",
            "value": "-4w",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            24,
            30,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) on -4w",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a) on now() 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      32,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          23,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        32,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "arguments": Array [],
            "enterNode": [Function],
            "exitNode": [Function],
            "function": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                27,
                30,
              ],
              "text": "now",
              "value": "now",
            },
            "getChildren": [Function],
            "operandType": "function",
            "parent": [Circular],
            "position": Array [
              27,
              32,
            ],
            "type": "operand",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              24,
              26,
            ],
            "text": "on",
            "value": "on",
          },
          "parent": [Circular],
          "position": Array [
            24,
            32,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a) on now()",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a, b) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          26,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              24,
              25,
            ],
            "text": "b",
            "type": "operand",
            "value": "b",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        26,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a, b)",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in (a, b) by jane after "2020/07/31" before "2020/08/05" 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      73,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "list",
        "parent": [Circular],
        "position": Array [
          20,
          26,
        ],
        "type": "operand",
        "values": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              21,
              22,
            ],
            "text": "a",
            "type": "operand",
            "value": "a",
          },
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              24,
              25,
            ],
            "text": "b",
            "type": "operand",
            "value": "b",
          },
        ],
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        73,
      ],
      "predicates": Array [
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              30,
              34,
            ],
            "text": "jane",
            "type": "operand",
            "value": "jane",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              27,
              29,
            ],
            "text": "by",
            "value": "by",
          },
          "parent": [Circular],
          "position": Array [
            27,
            34,
          ],
        },
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              41,
              53,
            ],
            "text": "\\"2020/07/31\\"",
            "type": "operand",
            "value": "2020/07/31",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              35,
              40,
            ],
            "text": "after",
            "value": "after",
          },
          "parent": [Circular],
          "position": Array [
            35,
            53,
          ],
        },
        Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              61,
              73,
            ],
            "text": "\\"2020/08/05\\"",
            "type": "operand",
            "value": "2020/08/05",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              54,
              60,
            ],
            "text": "before",
            "value": "before",
          },
          "parent": [Circular],
          "position": Array [
            54,
            73,
          ],
        },
      ],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in (a, b) by jane after \\"2020/07/31\\" before \\"2020/08/05\\"",
}
`;

exports[`Was in clause ðŸŸ© assignee was not in membersOf("jira-administrators") 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      52,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "arguments": Array [
          Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              30,
              51,
            ],
            "text": "\\"jira-administrators\\"",
            "value": "jira-administrators",
          },
        ],
        "enterNode": [Function],
        "exitNode": [Function],
        "function": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            20,
            29,
          ],
          "text": "membersOf",
          "value": "membersOf",
        },
        "getChildren": [Function],
        "operandType": "function",
        "parent": [Circular],
        "position": Array [
          20,
          52,
        ],
        "type": "operand",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          19,
        ],
        "text": "was not in",
        "value": "was not in",
      },
      "parent": [Circular],
      "position": Array [
        0,
        52,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee was not in membersOf(\\"jira-administrators\\")",
}
`;
