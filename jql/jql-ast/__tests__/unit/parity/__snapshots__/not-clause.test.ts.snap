// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Not clause 游린 ! 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      1,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": undefined,
  },
  "represents": "!",
}
`;

exports[`Not clause 游린 ! not 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      5,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": undefined,
  },
  "represents": "! not",
}
`;

exports[`Not clause 游린 not ! 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      5,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": undefined,
  },
  "represents": "not !",
}
`;

exports[`Not clause 游린 not 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      3,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": undefined,
  },
  "represents": "not",
}
`;

exports[`Not clause 游린 not issuetype =  1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {EMPTY, POSNUMBER, NEGNUMBER, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      16,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "clauseType": "terminal",
        "enterNode": [Function],
        "exitNode": [Function],
        "field": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            13,
          ],
          "properties": Array [],
          "text": "issuetype",
          "value": "issuetype",
        },
        "getChildren": [Function],
        "operand": undefined,
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            14,
            15,
          ],
          "text": "=",
          "value": "=",
        },
        "parent": [Circular],
        "position": Array [
          4,
          15,
        ],
        "predicates": Array [],
        "remove": [Function],
        "replace": [Function],
        "setOperand": [Function],
        "setOperator": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        15,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = ",
}
`;

exports[`Not clause 游린 not issuetype = bug and 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      23,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "clauseType": "terminal",
        "enterNode": [Function],
        "exitNode": [Function],
        "field": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            13,
          ],
          "properties": Array [],
          "text": "issuetype",
          "value": "issuetype",
        },
        "getChildren": [Function],
        "operand": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operandType": "value",
          "parent": [Circular],
          "position": Array [
            16,
            19,
          ],
          "text": "bug",
          "type": "operand",
          "value": "bug",
        },
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            14,
            15,
          ],
          "text": "=",
          "value": "=",
        },
        "parent": [Circular],
        "position": Array [
          4,
          19,
        ],
        "predicates": Array [],
        "remove": [Function],
        "replace": [Function],
        "setOperand": [Function],
        "setOperator": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = bug and",
}
`;

exports[`Not clause 游린 not issuetype = bug or 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "clauseType": "terminal",
        "enterNode": [Function],
        "exitNode": [Function],
        "field": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            13,
          ],
          "properties": Array [],
          "text": "issuetype",
          "value": "issuetype",
        },
        "getChildren": [Function],
        "operand": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operandType": "value",
          "parent": [Circular],
          "position": Array [
            16,
            19,
          ],
          "text": "bug",
          "type": "operand",
          "value": "bug",
        },
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            14,
            15,
          ],
          "text": "=",
          "value": "=",
        },
        "parent": [Circular],
        "position": Array [
          4,
          19,
        ],
        "predicates": Array [],
        "remove": [Function],
        "replace": [Function],
        "setOperand": [Function],
        "setOperator": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = bug or",
}
`;

exports[`Not clause 游린 not issuetype 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'<', '>', '>=', '<=', '=', '!=', '~', '!~', IN, IS, NOT, WAS, CHANGED}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      13,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "clauseType": "terminal",
        "enterNode": [Function],
        "exitNode": [Function],
        "field": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            13,
          ],
          "properties": Array [],
          "text": "issuetype",
          "value": "issuetype",
        },
        "getChildren": [Function],
        "operand": undefined,
        "operator": undefined,
        "parent": [Circular],
        "position": Array [
          4,
          13,
        ],
        "predicates": Array [],
        "remove": [Function],
        "replace": [Function],
        "setOperand": [Function],
        "setOperator": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        13,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype",
}
`;

exports[`Not clause 游린 not not 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      7,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": undefined,
  },
  "represents": "not not",
}
`;

exports[`Not clause 游릴 ! issuetype = bug 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "clauseType": "terminal",
        "enterNode": [Function],
        "exitNode": [Function],
        "field": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            2,
            11,
          ],
          "properties": Array [],
          "text": "issuetype",
          "value": "issuetype",
        },
        "getChildren": [Function],
        "operand": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operandType": "value",
          "parent": [Circular],
          "position": Array [
            14,
            17,
          ],
          "text": "bug",
          "type": "operand",
          "value": "bug",
        },
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            12,
            13,
          ],
          "text": "=",
          "value": "=",
        },
        "parent": [Circular],
        "position": Array [
          2,
          17,
        ],
        "predicates": Array [],
        "remove": [Function],
        "replace": [Function],
        "setOperand": [Function],
        "setOperator": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          1,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "! issuetype = bug",
}
`;

exports[`Not clause 游릴 ! issuetype = bug and not issuetype = epic and (component = jql or label = jql) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      79,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": Array [
        Object {
          "accept": [Function],
          "clause": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "clauseType": "terminal",
            "enterNode": [Function],
            "exitNode": [Function],
            "field": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                2,
                11,
              ],
              "properties": Array [],
              "text": "issuetype",
              "value": "issuetype",
            },
            "getChildren": [Function],
            "operand": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operandType": "value",
              "parent": [Circular],
              "position": Array [
                14,
                17,
              ],
              "text": "bug",
              "type": "operand",
              "value": "bug",
            },
            "operator": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                12,
                13,
              ],
              "text": "=",
              "value": "=",
            },
            "parent": [Circular],
            "position": Array [
              2,
              17,
            ],
            "predicates": Array [],
            "remove": [Function],
            "replace": [Function],
            "setOperand": [Function],
            "setOperator": [Function],
            "type": "clause",
          },
          "clauseType": "not",
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              0,
              1,
            ],
            "value": "not",
          },
          "parent": [Circular],
          "position": Array [
            0,
            17,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "clause": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "clauseType": "terminal",
            "enterNode": [Function],
            "exitNode": [Function],
            "field": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                26,
                35,
              ],
              "properties": Array [],
              "text": "issuetype",
              "value": "issuetype",
            },
            "getChildren": [Function],
            "operand": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operandType": "value",
              "parent": [Circular],
              "position": Array [
                38,
                42,
              ],
              "text": "epic",
              "type": "operand",
              "value": "epic",
            },
            "operator": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                36,
                37,
              ],
              "text": "=",
              "value": "=",
            },
            "parent": [Circular],
            "position": Array [
              26,
              42,
            ],
            "predicates": Array [],
            "remove": [Function],
            "replace": [Function],
            "setOperand": [Function],
            "setOperator": [Function],
            "type": "clause",
          },
          "clauseType": "not",
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              22,
              25,
            ],
            "value": "not",
          },
          "parent": [Circular],
          "position": Array [
            22,
            42,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "appendClause": [Function],
          "clauseType": "compound",
          "clauses": Array [
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  48,
                  57,
                ],
                "properties": Array [],
                "text": "component",
                "value": "component",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  60,
                  63,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  58,
                  59,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                48,
                63,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  67,
                  72,
                ],
                "properties": Array [],
                "text": "label",
                "value": "label",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  75,
                  78,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  73,
                  74,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                67,
                78,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
          ],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": null,
            "positions": Array [
              Array [
                64,
                66,
              ],
            ],
            "value": "or",
          },
          "parent": [Circular],
          "position": Array [
            48,
            78,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": Array [
          Array [
            18,
            21,
          ],
          Array [
            43,
            46,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": Array [
        0,
        79,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "! issuetype = bug and not issuetype = epic and (component = jql or label = jql)",
}
`;

exports[`Not clause 游릴 issuetype = bug and not component = jql 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      39,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": Array [
        Object {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              0,
              9,
            ],
            "properties": Array [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": Array [
            0,
            15,
          ],
          "predicates": Array [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "clause": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "clauseType": "terminal",
            "enterNode": [Function],
            "exitNode": [Function],
            "field": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                24,
                33,
              ],
              "properties": Array [],
              "text": "component",
              "value": "component",
            },
            "getChildren": [Function],
            "operand": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operandType": "value",
              "parent": [Circular],
              "position": Array [
                36,
                39,
              ],
              "text": "jql",
              "type": "operand",
              "value": "jql",
            },
            "operator": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                34,
                35,
              ],
              "text": "=",
              "value": "=",
            },
            "parent": [Circular],
            "position": Array [
              24,
              39,
            ],
            "predicates": Array [],
            "remove": [Function],
            "replace": [Function],
            "setOperand": [Function],
            "setOperator": [Function],
            "type": "clause",
          },
          "clauseType": "not",
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              20,
              23,
            ],
            "value": "not",
          },
          "parent": [Circular],
          "position": Array [
            20,
            39,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": Array [
          Array [
            16,
            19,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": Array [
        0,
        39,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and not component = jql",
}
`;

exports[`Not clause 游릴 issuetype = bug or not component = jql 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      38,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": Array [
        Object {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              0,
              9,
            ],
            "properties": Array [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": Array [
            0,
            15,
          ],
          "predicates": Array [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "clause": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "clauseType": "terminal",
            "enterNode": [Function],
            "exitNode": [Function],
            "field": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                23,
                32,
              ],
              "properties": Array [],
              "text": "component",
              "value": "component",
            },
            "getChildren": [Function],
            "operand": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operandType": "value",
              "parent": [Circular],
              "position": Array [
                35,
                38,
              ],
              "text": "jql",
              "type": "operand",
              "value": "jql",
            },
            "operator": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                33,
                34,
              ],
              "text": "=",
              "value": "=",
            },
            "parent": [Circular],
            "position": Array [
              23,
              38,
            ],
            "predicates": Array [],
            "remove": [Function],
            "replace": [Function],
            "setOperand": [Function],
            "setOperator": [Function],
            "type": "clause",
          },
          "clauseType": "not",
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              19,
              22,
            ],
            "value": "not",
          },
          "parent": [Circular],
          "position": Array [
            19,
            38,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": Array [
          Array [
            16,
            18,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": Array [
        0,
        38,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug or not component = jql",
}
`;

exports[`Not clause 游릴 not ! issuetype = bug 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "clause": Object {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              6,
              15,
            ],
            "properties": Array [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              18,
              21,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              16,
              17,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": Array [
            6,
            21,
          ],
          "predicates": Array [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        "clauseType": "not",
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            5,
          ],
          "value": "not",
        },
        "parent": [Circular],
        "position": Array [
          4,
          21,
        ],
        "remove": [Function],
        "removeClause": [Function],
        "replace": [Function],
        "replaceClause": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not ! issuetype = bug",
}
`;

exports[`Not clause 游릴 not issuetype = bug 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "appendOperand": [Function],
        "clauseType": "terminal",
        "enterNode": [Function],
        "exitNode": [Function],
        "field": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            13,
          ],
          "properties": Array [],
          "text": "issuetype",
          "value": "issuetype",
        },
        "getChildren": [Function],
        "operand": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operandType": "value",
          "parent": [Circular],
          "position": Array [
            16,
            19,
          ],
          "text": "bug",
          "type": "operand",
          "value": "bug",
        },
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            14,
            15,
          ],
          "text": "=",
          "value": "=",
        },
        "parent": [Circular],
        "position": Array [
          4,
          19,
        ],
        "predicates": Array [],
        "remove": [Function],
        "replace": [Function],
        "setOperand": [Function],
        "setOperator": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        19,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = bug",
}
`;

exports[`Not clause 游릴 not issuetype = bug and (component = jql or label = jql) 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      56,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": Array [
        Object {
          "accept": [Function],
          "clause": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "clauseType": "terminal",
            "enterNode": [Function],
            "exitNode": [Function],
            "field": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                4,
                13,
              ],
              "properties": Array [],
              "text": "issuetype",
              "value": "issuetype",
            },
            "getChildren": [Function],
            "operand": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operandType": "value",
              "parent": [Circular],
              "position": Array [
                16,
                19,
              ],
              "text": "bug",
              "type": "operand",
              "value": "bug",
            },
            "operator": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                14,
                15,
              ],
              "text": "=",
              "value": "=",
            },
            "parent": [Circular],
            "position": Array [
              4,
              19,
            ],
            "predicates": Array [],
            "remove": [Function],
            "replace": [Function],
            "setOperand": [Function],
            "setOperator": [Function],
            "type": "clause",
          },
          "clauseType": "not",
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              0,
              3,
            ],
            "value": "not",
          },
          "parent": [Circular],
          "position": Array [
            0,
            19,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "appendClause": [Function],
          "clauseType": "compound",
          "clauses": Array [
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  25,
                  34,
                ],
                "properties": Array [],
                "text": "component",
                "value": "component",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  37,
                  40,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  35,
                  36,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                25,
                40,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  44,
                  49,
                ],
                "properties": Array [],
                "text": "label",
                "value": "label",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  52,
                  55,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  50,
                  51,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                44,
                55,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
          ],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": null,
            "positions": Array [
              Array [
                41,
                43,
              ],
            ],
            "value": "or",
          },
          "parent": [Circular],
          "position": Array [
            25,
            55,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": Array [
          Array [
            20,
            23,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": Array [
        0,
        56,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = bug and (component = jql or label = jql)",
}
`;

exports[`Not clause 游릴 not issuetype = bug and component = jql or label = jql 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      54,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": Array [
        Object {
          "accept": [Function],
          "appendClause": [Function],
          "clauseType": "compound",
          "clauses": Array [
            Object {
              "accept": [Function],
              "clause": Object {
                "accept": [Function],
                "appendOperand": [Function],
                "clauseType": "terminal",
                "enterNode": [Function],
                "exitNode": [Function],
                "field": Object {
                  "accept": [Function],
                  "enterNode": [Function],
                  "exitNode": [Function],
                  "getChildren": [Function],
                  "parent": [Circular],
                  "position": Array [
                    4,
                    13,
                  ],
                  "properties": Array [],
                  "text": "issuetype",
                  "value": "issuetype",
                },
                "getChildren": [Function],
                "operand": Object {
                  "accept": [Function],
                  "enterNode": [Function],
                  "exitNode": [Function],
                  "getChildren": [Function],
                  "operandType": "value",
                  "parent": [Circular],
                  "position": Array [
                    16,
                    19,
                  ],
                  "text": "bug",
                  "type": "operand",
                  "value": "bug",
                },
                "operator": Object {
                  "accept": [Function],
                  "enterNode": [Function],
                  "exitNode": [Function],
                  "getChildren": [Function],
                  "parent": [Circular],
                  "position": Array [
                    14,
                    15,
                  ],
                  "text": "=",
                  "value": "=",
                },
                "parent": [Circular],
                "position": Array [
                  4,
                  19,
                ],
                "predicates": Array [],
                "remove": [Function],
                "replace": [Function],
                "setOperand": [Function],
                "setOperator": [Function],
                "type": "clause",
              },
              "clauseType": "not",
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  0,
                  3,
                ],
                "value": "not",
              },
              "parent": [Circular],
              "position": Array [
                0,
                19,
              ],
              "remove": [Function],
              "removeClause": [Function],
              "replace": [Function],
              "replaceClause": [Function],
              "type": "clause",
            },
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  24,
                  33,
                ],
                "properties": Array [],
                "text": "component",
                "value": "component",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  36,
                  39,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  34,
                  35,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                24,
                39,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
          ],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": null,
            "positions": Array [
              Array [
                20,
                23,
              ],
            ],
            "value": "and",
          },
          "parent": [Circular],
          "position": Array [
            0,
            39,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              43,
              48,
            ],
            "properties": Array [],
            "text": "label",
            "value": "label",
          },
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              51,
              54,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              49,
              50,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": Array [
            43,
            54,
          ],
          "predicates": Array [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": Array [
          Array [
            40,
            42,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": Array [
        0,
        54,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = bug and component = jql or label = jql",
}
`;

exports[`Not clause 游릴 not issuetype = bug or component = jql and label = jql 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      54,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": Array [
        Object {
          "accept": [Function],
          "clause": Object {
            "accept": [Function],
            "appendOperand": [Function],
            "clauseType": "terminal",
            "enterNode": [Function],
            "exitNode": [Function],
            "field": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                4,
                13,
              ],
              "properties": Array [],
              "text": "issuetype",
              "value": "issuetype",
            },
            "getChildren": [Function],
            "operand": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "operandType": "value",
              "parent": [Circular],
              "position": Array [
                16,
                19,
              ],
              "text": "bug",
              "type": "operand",
              "value": "bug",
            },
            "operator": Object {
              "accept": [Function],
              "enterNode": [Function],
              "exitNode": [Function],
              "getChildren": [Function],
              "parent": [Circular],
              "position": Array [
                14,
                15,
              ],
              "text": "=",
              "value": "=",
            },
            "parent": [Circular],
            "position": Array [
              4,
              19,
            ],
            "predicates": Array [],
            "remove": [Function],
            "replace": [Function],
            "setOperand": [Function],
            "setOperator": [Function],
            "type": "clause",
          },
          "clauseType": "not",
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              0,
              3,
            ],
            "value": "not",
          },
          "parent": [Circular],
          "position": Array [
            0,
            19,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
        Object {
          "accept": [Function],
          "appendClause": [Function],
          "clauseType": "compound",
          "clauses": Array [
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  23,
                  32,
                ],
                "properties": Array [],
                "text": "component",
                "value": "component",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  35,
                  38,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  33,
                  34,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                23,
                38,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
            Object {
              "accept": [Function],
              "appendOperand": [Function],
              "clauseType": "terminal",
              "enterNode": [Function],
              "exitNode": [Function],
              "field": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  43,
                  48,
                ],
                "properties": Array [],
                "text": "label",
                "value": "label",
              },
              "getChildren": [Function],
              "operand": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "operandType": "value",
                "parent": [Circular],
                "position": Array [
                  51,
                  54,
                ],
                "text": "jql",
                "type": "operand",
                "value": "jql",
              },
              "operator": Object {
                "accept": [Function],
                "enterNode": [Function],
                "exitNode": [Function],
                "getChildren": [Function],
                "parent": [Circular],
                "position": Array [
                  49,
                  50,
                ],
                "text": "=",
                "value": "=",
              },
              "parent": [Circular],
              "position": Array [
                43,
                54,
              ],
              "predicates": Array [],
              "remove": [Function],
              "replace": [Function],
              "setOperand": [Function],
              "setOperator": [Function],
              "type": "clause",
            },
          ],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": null,
            "positions": Array [
              Array [
                39,
                42,
              ],
            ],
            "value": "and",
          },
          "parent": [Circular],
          "position": Array [
            23,
            54,
          ],
          "remove": [Function],
          "removeClause": [Function],
          "replace": [Function],
          "replaceClause": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": Array [
          Array [
            20,
            22,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": Array [
        0,
        54,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not issuetype = bug or component = jql and label = jql",
}
`;

exports[`Not clause 游릴 not not issuetype = bug 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      23,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "clause": Object {
        "accept": [Function],
        "clause": Object {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              8,
              17,
            ],
            "properties": Array [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": Array [
              20,
              23,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": Object {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": Array [
              18,
              19,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": Array [
            8,
            23,
          ],
          "predicates": Array [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        "clauseType": "not",
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operator": Object {
          "accept": [Function],
          "enterNode": [Function],
          "exitNode": [Function],
          "getChildren": [Function],
          "parent": [Circular],
          "position": Array [
            4,
            7,
          ],
          "value": "not",
        },
        "parent": [Circular],
        "position": Array [
          4,
          23,
        ],
        "remove": [Function],
        "removeClause": [Function],
        "replace": [Function],
        "replaceClause": [Function],
        "type": "clause",
      },
      "clauseType": "not",
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          3,
        ],
        "value": "not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        23,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "not not issuetype = bug",
}
`;
