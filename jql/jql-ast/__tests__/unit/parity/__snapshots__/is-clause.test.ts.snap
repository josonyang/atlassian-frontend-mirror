// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Is clause 游린 assignee is (a, b) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '(' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        18,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is (a, b)",
}
`;

exports[`Is clause 游린 assignee is -5 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '-5' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      14,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        14,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is -5",
}
`;

exports[`Is clause 游린 assignee is 0 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '0' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      13,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        13,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is 0",
}
`;

exports[`Is clause 游린 assignee is 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: missing EMPTY at '<EOF>'],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      11,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          -1,
          0,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        11,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is",
}
`;

exports[`Is clause 游린 assignee is b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'b' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      13,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        13,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is b",
}
`;

exports[`Is clause 游린 assignee is currentUser() 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'currentUser' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      25,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        25,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is currentUser()",
}
`;

exports[`Is clause 游린 assignee is empty after -1w 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'after' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      27,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty after -1w",
}
`;

exports[`Is clause 游린 assignee is empty before -1w 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'before' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      28,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty before -1w",
}
`;

exports[`Is clause 游린 assignee is empty by b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'by' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty by b",
}
`;

exports[`Is clause 游린 assignee is empty during (-1w, now()) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'during' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      37,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty during (-1w, now())",
}
`;

exports[`Is clause 游린 assignee is empty from b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      24,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty from b",
}
`;

exports[`Is clause 游린 assignee is empty on -1w 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'on' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      24,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty on -1w",
}
`;

exports[`Is clause 游린 assignee is empty to b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'to' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty to b",
}
`;

exports[`Is clause 游린 assignee is not (a, b) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '(' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        22,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not (a, b)",
}
`;

exports[`Is clause 游린 assignee is not -5 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '-5' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        18,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not -5",
}
`;

exports[`Is clause 游린 assignee is not 0 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input '0' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not 0",
}
`;

exports[`Is clause 游린 assignee is not 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: missing EMPTY at '<EOF>'],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      15,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          -1,
          0,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        15,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not",
}
`;

exports[`Is clause 游린 assignee is not b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'b' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not b",
}
`;

exports[`Is clause 游린 assignee is not currentUser() 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'currentUser' expecting EMPTY],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      29,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": undefined,
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        29,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not currentUser()",
}
`;

exports[`Is clause 游린 assignee is not empty after -1w 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'after' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      31,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty after -1w",
}
`;

exports[`Is clause 游린 assignee is not empty before -1w 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'before' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      32,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty before -1w",
}
`;

exports[`Is clause 游린 assignee is not empty by b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'by' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty by b",
}
`;

exports[`Is clause 游린 assignee is not empty during (-1w, now()) 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'during' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      41,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty during (-1w, now())",
}
`;

exports[`Is clause 游린 assignee is not empty from b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'from' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      28,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty from b",
}
`;

exports[`Is clause 游린 assignee is not empty on -1w 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'on' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      28,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty on -1w",
}
`;

exports[`Is clause 游린 assignee is not empty to b 1`] = `
Object {
  "errors": Array [
    [JQLSyntaxError: mismatched input 'to' expecting {<EOF>, ORDER}],
  ],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      26,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty to b",
}
`;

exports[`Is clause 游릴 assignee Is empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "Is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee Is empty",
}
`;

exports[`Is clause 游릴 assignee Is nOt empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "Is nOt",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee Is nOt empty",
}
`;

exports[`Is clause 游릴 assignee iS empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "iS",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee iS empty",
}
`;

exports[`Is clause 游릴 assignee is
not empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is
not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is
not empty",
}
`;

exports[`Is clause 游릴 assignee is    not empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      24,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          19,
          24,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          18,
        ],
        "text": "is    not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        24,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is    not empty",
}
`;

exports[`Is clause 游릴 assignee is EmPtY 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is EmPtY",
}
`;

exports[`Is clause 游릴 assignee is empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      17,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          17,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        17,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is empty",
}
`;

exports[`Is clause 游릴 assignee is not EmPtY 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not EmPtY",
}
`;

exports[`Is clause 游릴 assignee is not empty 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      21,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          21,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        21,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not empty",
}
`;

exports[`Is clause 游릴 assignee is not null 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      20,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          16,
          20,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          15,
        ],
        "text": "is not",
        "value": "is not",
      },
      "parent": [Circular],
      "position": Array [
        0,
        20,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is not null",
}
`;

exports[`Is clause 游릴 assignee is null 1`] = `
Object {
  "errors": Array [],
  "query": Object {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": Array [
      0,
      16,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "replaceClause": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": Object {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          0,
          8,
        ],
        "properties": Array [],
        "text": "assignee",
        "value": "assignee",
      },
      "getChildren": [Function],
      "operand": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "keyword",
        "parent": [Circular],
        "position": Array [
          12,
          16,
        ],
        "type": "operand",
        "value": "empty",
      },
      "operator": Object {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": Array [
          9,
          11,
        ],
        "text": "is",
        "value": "is",
      },
      "parent": [Circular],
      "position": Array [
        0,
        16,
      ],
      "predicates": Array [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "assignee is null",
}
`;
