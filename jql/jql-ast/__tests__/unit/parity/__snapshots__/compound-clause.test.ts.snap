// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compound clause 游린 and issuetype = bug 1`] = `
{
  "errors": [
    [JQLSyntaxError: extraneous input 'and' expecting {<EOF>, '(', '!', NOT, ORDER, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          4,
          13,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          16,
          19,
        ],
        "text": "bug",
        "type": "operand",
        "value": "bug",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          14,
          15,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        4,
        19,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "and issuetype = bug",
}
`;

exports[`Compound clause 游린 issuetype = bug and () 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input ')' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      22,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          15,
        ],
        "text": "bug",
        "type": "operand",
        "value": "bug",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        15,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and ()",
}
`;

exports[`Compound clause 游린 issuetype = bug and 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      19,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          15,
        ],
        "text": "bug",
        "type": "operand",
        "value": "bug",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        15,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and",
}
`;

exports[`Compound clause 游린 issuetype = bug and and component = jql 1`] = `
{
  "errors": [
    [JQLSyntaxError: extraneous input 'and' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      39,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              24,
              33,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              36,
              39,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              34,
              35,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            24,
            39,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            19,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": [
        0,
        39,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and and component = jql",
}
`;

exports[`Compound clause 游린 issuetype = bug or 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input '<EOF>' expecting {'(', '!', NOT, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          0,
          9,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          12,
          15,
        ],
        "text": "bug",
        "type": "operand",
        "value": "bug",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          10,
          11,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        0,
        15,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug or",
}
`;

exports[`Compound clause 游린 issuetype = bug or component or component = jql 1`] = `
{
  "errors": [
    [JQLSyntaxError: mismatched input 'or' expecting {'<', '>', '>=', '<=', '=', '!=', '~', '!~', IN, IS, NOT, WAS, CHANGED}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      47,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              19,
              28,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": undefined,
          "operator": undefined,
          "parent": [Circular],
          "position": [
            19,
            28,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              32,
              41,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              44,
              47,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              42,
              43,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            32,
            47,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            18,
          ],
          [
            29,
            31,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": [
        0,
        47,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug or component or component = jql",
}
`;

exports[`Compound clause 游린 or issuetype = bug 1`] = `
{
  "errors": [
    [JQLSyntaxError: extraneous input 'or' expecting {<EOF>, '(', '!', NOT, ORDER, POSNUMBER, NEGNUMBER, CUSTOMFIELD, STRING, QUOTE_STRING, SQUOTE_STRING}],
  ],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      18,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendOperand": [Function],
      "clauseType": "terminal",
      "enterNode": [Function],
      "exitNode": [Function],
      "field": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          3,
          12,
        ],
        "properties": [],
        "text": "issuetype",
        "value": "issuetype",
      },
      "getChildren": [Function],
      "operand": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "operandType": "value",
        "parent": [Circular],
        "position": [
          15,
          18,
        ],
        "text": "bug",
        "type": "operand",
        "value": "bug",
      },
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": [
          13,
          14,
        ],
        "text": "=",
        "value": "=",
      },
      "parent": [Circular],
      "position": [
        3,
        18,
      ],
      "predicates": [],
      "remove": [Function],
      "replace": [Function],
      "setOperand": [Function],
      "setOperator": [Function],
      "type": "clause",
    },
  },
  "represents": "or issuetype = bug",
}
`;

exports[`Compound clause 游릴 issuetype = bug & component = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      33,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              18,
              27,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              30,
              33,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              28,
              29,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            18,
            33,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            17,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": [
        0,
        33,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug & component = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug && component = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      34,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              19,
              28,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              31,
              34,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              29,
              30,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            19,
            34,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            18,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": [
        0,
        34,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug && component = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug | component = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      33,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              18,
              27,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              30,
              33,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              28,
              29,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            18,
            33,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            17,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": [
        0,
        33,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug | component = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug || component = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      34,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              19,
              28,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              31,
              34,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              29,
              30,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            19,
            34,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            18,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": [
        0,
        34,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug || component = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug and component = jql && label = jql & tag = jql AND url ~ jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      76,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              20,
              29,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              32,
              35,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              30,
              31,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            20,
            35,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              39,
              44,
            ],
            "properties": [],
            "text": "label",
            "value": "label",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              47,
              50,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              45,
              46,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            39,
            50,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              53,
              56,
            ],
            "properties": [],
            "text": "tag",
            "value": "tag",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              59,
              62,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              57,
              58,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            53,
            62,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              67,
              70,
            ],
            "properties": [],
            "text": "url",
            "value": "url",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              73,
              76,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              71,
              72,
            ],
            "text": "~",
            "value": "~",
          },
          "parent": [Circular],
          "position": [
            67,
            76,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            19,
          ],
          [
            36,
            38,
          ],
          [
            51,
            52,
          ],
          [
            63,
            66,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": [
        0,
        76,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and component = jql && label = jql & tag = jql AND url ~ jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug and component = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      35,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              20,
              29,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              32,
              35,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              30,
              31,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            20,
            35,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            19,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": [
        0,
        35,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and component = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug and component = jql and label = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      51,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              20,
              29,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              32,
              35,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              30,
              31,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            20,
            35,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              40,
              45,
            ],
            "properties": [],
            "text": "label",
            "value": "label",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              48,
              51,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              46,
              47,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            40,
            51,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            19,
          ],
          [
            36,
            39,
          ],
        ],
        "value": "and",
      },
      "parent": [Circular],
      "position": [
        0,
        51,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug and component = jql and label = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug or component = jql || label = jql | tag = jql OR url ~ jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      74,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              19,
              28,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              31,
              34,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              29,
              30,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            19,
            34,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              38,
              43,
            ],
            "properties": [],
            "text": "label",
            "value": "label",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              46,
              49,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              44,
              45,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            38,
            49,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              52,
              55,
            ],
            "properties": [],
            "text": "tag",
            "value": "tag",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              58,
              61,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              56,
              57,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            52,
            61,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              65,
              68,
            ],
            "properties": [],
            "text": "url",
            "value": "url",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              71,
              74,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              69,
              70,
            ],
            "text": "~",
            "value": "~",
          },
          "parent": [Circular],
          "position": [
            65,
            74,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            18,
          ],
          [
            35,
            37,
          ],
          [
            50,
            51,
          ],
          [
            62,
            64,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": [
        0,
        74,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug or component = jql || label = jql | tag = jql OR url ~ jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug or component = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      34,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              19,
              28,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              31,
              34,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              29,
              30,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            19,
            34,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            18,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": [
        0,
        34,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug or component = jql",
}
`;

exports[`Compound clause 游릴 issuetype = bug or component = jql or label = jql 1`] = `
{
  "errors": [],
  "query": {
    "accept": [Function],
    "appendClause": [Function],
    "enterNode": [Function],
    "exitNode": [Function],
    "getChildren": [Function],
    "orderBy": undefined,
    "parent": null,
    "position": [
      0,
      49,
    ],
    "prependOrderField": [Function],
    "removeClause": [Function],
    "removeOrderBy": [Function],
    "replaceClause": [Function],
    "replaceOrderBy": [Function],
    "setOrderDirection": [Function],
    "type": "query",
    "where": {
      "accept": [Function],
      "appendClause": [Function],
      "clauseType": "compound",
      "clauses": [
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              0,
              9,
            ],
            "properties": [],
            "text": "issuetype",
            "value": "issuetype",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              12,
              15,
            ],
            "text": "bug",
            "type": "operand",
            "value": "bug",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              10,
              11,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            0,
            15,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              19,
              28,
            ],
            "properties": [],
            "text": "component",
            "value": "component",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              31,
              34,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              29,
              30,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            19,
            34,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
        {
          "accept": [Function],
          "appendOperand": [Function],
          "clauseType": "terminal",
          "enterNode": [Function],
          "exitNode": [Function],
          "field": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              38,
              43,
            ],
            "properties": [],
            "text": "label",
            "value": "label",
          },
          "getChildren": [Function],
          "operand": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "operandType": "value",
            "parent": [Circular],
            "position": [
              46,
              49,
            ],
            "text": "jql",
            "type": "operand",
            "value": "jql",
          },
          "operator": {
            "accept": [Function],
            "enterNode": [Function],
            "exitNode": [Function],
            "getChildren": [Function],
            "parent": [Circular],
            "position": [
              44,
              45,
            ],
            "text": "=",
            "value": "=",
          },
          "parent": [Circular],
          "position": [
            38,
            49,
          ],
          "predicates": [],
          "remove": [Function],
          "replace": [Function],
          "setOperand": [Function],
          "setOperator": [Function],
          "type": "clause",
        },
      ],
      "enterNode": [Function],
      "exitNode": [Function],
      "getChildren": [Function],
      "operator": {
        "accept": [Function],
        "enterNode": [Function],
        "exitNode": [Function],
        "getChildren": [Function],
        "parent": [Circular],
        "position": null,
        "positions": [
          [
            16,
            18,
          ],
          [
            35,
            37,
          ],
        ],
        "value": "or",
      },
      "parent": [Circular],
      "position": [
        0,
        49,
      ],
      "remove": [Function],
      "removeClause": [Function],
      "replace": [Function],
      "replaceClause": [Function],
      "type": "clause",
    },
  },
  "represents": "issuetype = bug or component = jql or label = jql",
}
`;
