// NCS error coded (generated by NCS)
export enum NCS_ERROR_CODE {
  HEAD_VERSION_UPDATE_FAILED = 'HEAD_VERSION_UPDATE_FAILED',
  VERSION_NUMBER_ALREADY_EXISTS = 'VERSION_NUMBER_ALREADY_EXISTS',
  INSUFFICIENT_EDITING_PERMISSION = 'INSUFFICIENT_EDITING_PERMISSION',
  FORBIDDEN_USER_TOKEN = 'FORBIDDEN_USER_TOKEN',
  DOCUMENT_NOT_FOUND = 'DOCUMENT_NOT_FOUND',
  INIT_DATA_LOAD_FAILED = 'INIT_DATA_LOAD_FAILED',
  ERROR_MAPPING_ERROR = 'ERROR_MAPPING_ERROR',
  NAMESPACE_INVALID = 'NAMESPACE_INVALID',
  NAMESPACE_NOT_FOUND = 'NAMESPACE_NOT_FOUND',
  TENANT_INSTANCE_MAINTENANCE = 'TENANT_INSTANCE_MAINTENANCE',
  LOCKED_DOCUMENT = 'LOCKED_DOCUMENT',
  EMPTY_BROADCAST = 'EMPTY_BROADCAST',
  DYNAMO_ERROR = 'DYNAMO_ERROR',
  INVALID_ACTIVATION_ID = 'INVALID_ACTIVATION_ID',
  INVALID_DOCUMENT_ARI = 'INVALID_DOCUMENT_ARI',
  INVALID_CLOUD_ID = 'INVALID_CLOUD_ID',
  RATE_LIMIT_ERROR = 'RATE_LIMIT_ERROR',
  PROSEMIRROR_SCHEMA_VALIDATION_ERROR = 'PROSEMIRROR_SCHEMA_VALIDATION_ERROR',
}

// TODO: Import emitted error codes from NCS

// NCS Errors
// - Step rejection errors
type HeadVersionUpdateFailedError = {
  message: string; // Version number does not match current head version.
  data: {
    code: NCS_ERROR_CODE.HEAD_VERSION_UPDATE_FAILED;
    meta: {
      currentVersion: any; // But likely a number
      incomingVersion: number;
    };
    status: number; // 409
  };
};
type VersionAlreadyPresentInDynamoError = {
  message: string; // Version already exists
  data: {
    code: NCS_ERROR_CODE.VERSION_NUMBER_ALREADY_EXISTS;
    meta: string; // Incoming version number already exists. Therefore, new ProseMirror steps will be rejected.
    status: number; // 409
  };
};
// - Permission errors
type InsufficientEditingPermissionError = {
  message: string; // No permission
  data: {
    code: NCS_ERROR_CODE.INSUFFICIENT_EDITING_PERMISSION;
    meta: {
      description: string; // The user does not have permission for collaborative editing of this resource or the resource was deleted
      reason?: string; // Usually empty
    };
    status: number; // 401
  };
};
type ForbiddenUserTokenError = {
  message: string; // Various issues with the user context token
  data: {
    code: NCS_ERROR_CODE.FORBIDDEN_USER_TOKEN;
    meta: string; // Forbidden to access pass due to invalid user token
    status: number; // 403
  };
};
// - Page missing / TTL errors
type NCSDocumentNotFoundError = {
  message: string; // The requested document is not found
  data: {
    code: NCS_ERROR_CODE.DOCUMENT_NOT_FOUND;
    status: number; // 404
  };
};
// - Server errors
type FailedToLoadInitDataError = {
  message: string; // Failed to load initialisation data after connection established
  data: {
    code: NCS_ERROR_CODE.INIT_DATA_LOAD_FAILED;
    status: number; // 500
  };
};
/**
 * The backend has retrieved the document successfully, as ADF, but failed to convert it to Prosemirror.
 * This might be because invalid ADF has been written to a document, as it was not validated correctly.
 */
type ProsemirrorSchemaValidationError = {
  message: string; // Failed to load initialisation data after connection established
  data: {
    code: NCS_ERROR_CODE.PROSEMIRROR_SCHEMA_VALIDATION_ERROR;
    status: number; // Could be 4xx or 5xx, depending on init or reset endpoint.
  };
};
type ErrorMappingError = {
  message: string; // 'Internal Server Error'
  data: {
    code: NCS_ERROR_CODE.ERROR_MAPPING_ERROR;
    status: number; // 500
  };
};
// - Less common back-end errors
type InvalidNamespaceDefinedError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.NAMESPACE_INVALID;
    meta: string;
    status: number; // 400
  };
};
type SocketNamespaceNotFoundError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.NAMESPACE_NOT_FOUND;
    meta: string;
    status: number; // 500
  };
};
type TenantInstanceMaintenanceError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.TENANT_INSTANCE_MAINTENANCE;
    meta: {
      description: string;
      reason: string;
    };
    status: number; // 423
  };
};
type NamespaceLockedError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.LOCKED_DOCUMENT;
    meta: string;
    status: number; // 400
  };
};
type EmptyBroadcastError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.EMPTY_BROADCAST;
    meta: string;
    status: number; // 400
  };
};
type DynamoError = {
  message: string; // Error while updating metadata
  data: {
    code: NCS_ERROR_CODE.DYNAMO_ERROR;
    meta: string; // No value returned from metadata while updating
    status: number; // 500
  };
};
type InvalidActivationIdError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.INVALID_ACTIVATION_ID;
    meta: string;
    status: number; // 400
  };
};
type InvalidDocumentAriError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.INVALID_DOCUMENT_ARI;
    meta: string;
    status: number; // 400
  };
};
type InvalidCloudIdError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.INVALID_CLOUD_ID;
    meta: string;
    status: number; // 401
  };
};
/**
 * The client is trying to send too many messages or messages that are too large. This not expected to be a standard
 * operating condition and should only ever indicate a frontend bug.
 */
export type RateLimitError = {
  message: string;
  data: {
    code: NCS_ERROR_CODE.RATE_LIMIT_ERROR;
    meta: {
      rateLimitType: number;
      maxStepSize: number;
      stepSizeCounter: number;
      stepCounter: number;
    };
    status: 500;
  };
};

export type NCSErrors =
  | HeadVersionUpdateFailedError
  | VersionAlreadyPresentInDynamoError
  | InsufficientEditingPermissionError
  | ForbiddenUserTokenError
  | NCSDocumentNotFoundError
  | FailedToLoadInitDataError
  | ErrorMappingError
  | InvalidNamespaceDefinedError
  | SocketNamespaceNotFoundError
  | TenantInstanceMaintenanceError
  | NamespaceLockedError
  | EmptyBroadcastError
  | DynamoError
  | InvalidActivationIdError
  | InvalidDocumentAriError
  | InvalidCloudIdError
  | RateLimitError
  | ProsemirrorSchemaValidationError;
