/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { PureComponent, type ReactNode } from 'react';

import { css, jsx } from '@compiled/react';

export interface Props {
	children?: ReactNode;
}

/*
	Increasing specificity with double ampersand to ensure these rules take
	priority over the global styles applied to 'ol' elements.
*/
const listStyles = css({
	// eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
	'&&': {
		listStyleType: 'none',
		paddingLeft: 0,
	},
});

export default class DecisionList extends PureComponent<Props, {}> {
	render() {
		const { children } = this.props;

		if (!children) {
			return null;
		}

		// Data attributes are required for copy and paste from rendered content
		// to the editor to preserve the decision.
		// This allows the editor to differentiate between numbered and ordered lists,
		// and action items, which all share the common `<li>` element.
		// The value of `data-decision-local-id` should be discarded upon paste, with a
		// a new uuid generated by the editor for the cloned content.
		return (
			// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
			<ol css={listStyles} data-decision-list-local-id="" data-node-type="decisionList">
				{React.Children.map(children, (child, idx) => {
					const { localId } = (child as React.ReactElement).props as {
						localId: string;
					};
					return (
						<li key={idx} data-decision-local-id={localId || ''} data-decision-state="DECIDED">
							{child}
						</li>
					);
				})}
			</ol>
		);
	}
}
