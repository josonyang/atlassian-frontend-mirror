/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { type ReactNode } from 'react';
import { css, jsx } from '@compiled/react';
import { FabricElementsAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
import { messages } from './i18n';
import { token } from '@atlaskit/tokens';
import { useIntl } from 'react-intl-next';

const listStyles = css({
	listStyleType: 'none',
	paddingLeft: 0,
});

const taskListStyles = css({
	marginTop: token('space.050', '4px'),
});

export interface Props {
	children?: ReactNode;
	listId?: string;
}

const TaskList = ({ listId, children }: Props) => {
	const listSize = React.Children.count(children);

	const { formatMessage } = useIntl();

	if (!children) {
		return null;
	}

	// Data attributes are required for copy and paste from rendered content
	// to the editor to preserve the task.
	// This allows the editor to differentiate between numbered and ordered lists,
	// and action items, which all share the common '‹li›' element.
	// The value of 'data-task-local-id' should be discarded upon paste, with a
	// a new uuid generated by the editor for the cloned content.
	return (
		<div
			role="group"
			css={listStyles}
			data-task-list-local-id=""
			aria-label={formatMessage(messages.fieldsetLabel)}
		>
			{React.Children.map(children, (child, idx) => {
				const { localId } = (child as React.ReactElement).props as {
					localId: string;
				};
				return (
					<FabricElementsAnalyticsContext
						data={{
							listLocalId: listId,
							listSize,
							position: idx,
						}}
					>
						<div key={idx} data-task-local-id={localId || ''} css={taskListStyles}>
							{child}
						</div>
					</FabricElementsAnalyticsContext>
				);
			})}
		</div>
	);
};

export default TaskList;
