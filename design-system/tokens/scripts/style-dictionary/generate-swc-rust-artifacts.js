/*
 * Generate Rust-friendly constants for the SWC tokens plugin.
 * Sources: codegen JS artifacts in prebuilt/artifacts (produced by `yarn build tokens`).
 */
/* eslint-disable no-console, global-require, import/no-dynamic-require */
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

/* Inlined because of ts/js cjs/esm interop  import { createSignedArtifact } from '@atlassian/codegen';*/
function createSignedArtifact(source, command, description) {
	const hash = crypto.createHash('md5').update(source, 'utf8').digest('hex');
	const lines = [
		'/**',
		' * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}',
		' *',
	];
	if (description && String(description).trim()) {
		lines.push(` * ${String(description).trim()}`, ' *');
	}
	lines.push(` * @codegen <<SignedSource::${hash}>>`);
	lines.push(` * @codegenCommand ${command}`);
	lines.push(' */');
	return `${lines.join('\n')}\n${source}`;
}

const packageRoot = path.resolve(__dirname, '../..');
const prebuiltRoot = path.join(packageRoot, 'prebuilt', 'artifacts');

function requireJsonish(modulePath) {
	// prebuilt artifacts are CJS default exports
	const mod = require(modulePath);
	return mod && mod.__esModule && 'default' in mod ? mod.default : mod;
}

function getThemeValues(theme) {
	return theme.reduce((formatted, rawToken) => {
		let value;
		if (typeof rawToken.value === 'string') {
			value = rawToken.value;
		} else if (typeof rawToken.value === 'number') {
			value = String(rawToken.value);
		} else if (Array.isArray(rawToken.value)) {
			value = rawToken.value.reduce((prev, curr, index) => {
				let { color } = curr;
				if (typeof color === 'string' && color.length === 7 && curr.opacity) {
					const opacityAsHex = curr.opacity.toString(16);
					let shortenedHex = opacityAsHex.slice(2, 4);
					if (shortenedHex.length === 1) {
						shortenedHex += '0';
					}
					color += shortenedHex;
				}
				let v = `${curr.offset.x}px ${curr.offset.y}px ${curr.radius}px ${color}`;
				if (index === 0) {
					v += `, `;
				}
				return prev + v;
			}, '');
		} else {
			// Unknown value shape â€“ default to string coercion to avoid crashing codegen
			value = String(rawToken.value);
		}
		return { ...formatted, [rawToken.cleanName]: value };
	}, {});
}

function toRsPairsConst(name, obj) {
	const pairs = Object.entries(obj)
		.map(([k, v]) => {
			const escapedK = k.replace(/"/g, '\\"');
			const escapedV = String(v).replace(/"/g, '\\"');
			return `  ("${escapedK}", "${escapedV}"),`;
		})
		.join('\n');
	return `pub static ${name}: &[(&str, &str)] = &[\n${pairs}\n];\n`;
}

function main() {
	const tokenNames = requireJsonish(path.join(prebuiltRoot, 'token-names.js'));
	const light = requireJsonish(path.join(prebuiltRoot, 'tokens-raw', 'atlassian-light.js'));
	const legacyLight = requireJsonish(
		path.join(prebuiltRoot, 'tokens-raw', 'atlassian-legacy-light.js'),
	);
	const shape = requireJsonish(path.join(prebuiltRoot, 'tokens-raw', 'atlassian-shape.js'));
	const spacing = requireJsonish(path.join(prebuiltRoot, 'tokens-raw', 'atlassian-spacing.js'));
	const typography = requireJsonish(
		path.join(prebuiltRoot, 'tokens-raw', 'atlassian-typography-adg3.js'),
	);

	const lightValues = getThemeValues(light);
	const legacyLightValues = getThemeValues(legacyLight);
	const shapeValues = getThemeValues(shape);
	const spacingValues = getThemeValues(spacing);
	const typographyValues = getThemeValues(typography);

	const header = `// @generated by scripts/style-dictionary/generate-swc-rust-artifacts.js\n// DO NOT EDIT MANUALLY\n`;
	const body = [
		toRsPairsConst('TOKEN_NAMES', tokenNames),
		toRsPairsConst('LIGHT_VALUES', lightValues),
		toRsPairsConst('LEGACY_LIGHT_VALUES', legacyLightValues),
		toRsPairsConst('SHAPE_VALUES', shapeValues),
		toRsPairsConst('SPACING_VALUES', spacingValues),
		toRsPairsConst('TYPOGRAPHY_VALUES', typographyValues),
	].join('\n');

	const outDir = path.resolve(
		packageRoot,
		'../../crates/swc-plugin-atlaskit-tokens/transform/src/generated',
	);
	fs.mkdirSync(outDir, { recursive: true });
	const content = `${header}\n${body}`;
	const signed = createSignedArtifact(content, 'yarn build tokens');
	fs.writeFileSync(path.join(outDir, 'token_data.rs'), signed);
	console.log(`Wrote Rust token data to ${path.join(outDir, 'token_data.rs')}`);
}

try {
	main();
} catch (e) {
	console.error('[generate-swc-rust-artifacts] failed:', e);
	process.exit(1);
}
